// Final function that will be called inside executeTask
function finalCallback(result) {
  console.log("Final callback executed with result:", result);
}

// Transaction object with executeTask method
class Transaction {
  executeTask(task, callback) {
    console.log("Executing task...");
    const result = task(); // Simulate a task execution
    callback(result); // Call the callback with the result of the task
  }
}

// Library object with transaction method
class Library {
  transaction(taskFunction) {
    console.log("Starting transaction...");
    const tx = new Transaction(); // Create a Transaction object
    taskFunction(tx); // Call the taskFunction with the Transaction object
  }
}

// Task function to be passed to the transaction method
function taskFunction(tx) {
  console.log("Task function executed...");
  tx.executeTask(() => "Task completed", finalCallback);
}

// Create a Library object
const library = new Library();

// Start a transaction
library.transaction(taskFunction);
